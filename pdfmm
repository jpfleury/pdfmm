#!/bin/bash

# Ce fichier fait partie de pdfmm.
# pdfmm est un assistant graphique pour réduire la taille d'un fichier PDF.

# Auteur: Jean-Philippe Fleury <contact@jpfleury.net>
# Copyright © Jean-Philippe Fleury, 2011-2012, 2014.

# Ce programme est un logiciel libre; vous pouvez le redistribuer ou le
# modifier suivant les termes de la GNU General Public License telle que
# publiée par la Free Software Foundation: soit la version 3 de cette
# licence, soit (à votre gré) toute version ultérieure.

# Ce programme est distribué dans l'espoir qu'il vous sera utile, mais SANS
# AUCUNE GARANTIE: sans même la garantie implicite de COMMERCIALISABILITÉ
# ni d'ADÉQUATION À UN OBJECTIF PARTICULIER. Consultez la Licence publique
# générale GNU pour plus de détails.

# Vous devriez avoir reçu une copie de la Licence publique générale GNU avec
# ce programme; si ce n'est pas le cas, consultez
# <http://www.gnu.org/licenses/>.

########################################################################
##
## Localisation.
##
########################################################################

declare -A msg

####################################
##
## Français.
##
####################################

msg[ERR_ZENITY]="Veuillez installer zenity."
msg[ERR_GS]="Veuillez installer ghostscript."
msg[ERR_SED]="Veuillez installer sed."
msg[TITRE_SELECTION]="Sélectionnez les fichiers PDF dont la taille doit être réduite"
msg[ERR_SELECTION]="Aucun fichier PDF sélectionné."
msg[ERR_TMP]="Impossible de créer de fichier temporaire."
msg[TITRE_FICHIER]="=========================\n%s. Fichier «%s»\n========================="
msg[ERR_FICHIER]="Ce fichier n'existe pas ou n'est pas utilisable."
msg[FICHIER_EXISTE_QUESTION]="Le fichier suivant existe déjà:\n%s\n\nVoulez-vous l'écraser?"
msg[FICHIER_EXISTE]="Le fichier «%s» existe déjà."
msg[EN_COURS]="Réduction de la taille en cours."
msg[ERR_REDUCTION]="Erreur lors de la réduction de la taille du fichier."
msg[FICHIER_OPTIMISE]="Le fichier optimisé est «%s»."
msg[STATS]="Statistiques:\n- taille de départ: %s\n- taille de sortie: %s\n- pourcentage d'optimisation: %s %%"
msg[UNIT_0]="o"
msg[UNIT_1]="Kio"
msg[UNIT_2]="Mio"
msg[UNIT_3]="Gio"
msg[PROP_SIZE_B]="(%s o)"
msg[TITRE_RESULTATS]="Résultats"

####################################
##
## English.
##
####################################

if [[ ${LANG:0:2} == en ]]; then
	msg[ERR_ZENITY]="Please install zenity."
	msg[ERR_GS]="Please install ghostscript."
	msg[ERR_SED]="Please install sed."
	msg[TITRE_SELECTION]="Select PDF files to reduce"
	msg[ERR_SELECTION]="No PDF file selected."
	msg[ERR_TMP]="Can't create temporary file."
	msg[TITRE_FICHIER]="=========================\n%s. File \"%s\"\n========================="
	msg[ERR_FICHIER]="This file doesn't exist or isn't available."
	msg[FICHIER_EXISTE_QUESTION]="The following file already exists:\n%s\n\nDo you want to overwrite it?"
	msg[FICHIER_EXISTE]="The file \"%s\" already exists."
	msg[EN_COURS]="Reduction of the size in progress."
	msg[ERR_REDUCTION]="Error while reducing the size of the file."
	msg[FICHIER_OPTIMISE]="The optimized file is \"%s\"."
	msg[STATS]="Statistics:\n- input size: %s\n- output size: %s\n- optimization percentage: %s %%"
	msg[UNIT_0]="B"
	msg[UNIT_1]="KiB"
	msg[UNIT_2]="MiB"
	msg[UNIT_3]="GiB"
	msg[PROP_SIZE_B]="(%s B)"
	msg[TITRE_RESULTATS]="Results"
fi

####################################
##
## Deutsch.
##
####################################

if [[ ${LANG:0:2} == de ]]; then
	msg[ERR_ZENITY]="Bitte installieren Sie zenity."
	msg[ERR_GS]="Bitte installieren Sie ghostscript."
	msg[ERR_SED]="Bitte installieren Sie sed."
	msg[TITRE_SELECTION]="PDF-Datei zum verkleinern auswählen"
	msg[ERR_SELECTION]="Keine PDF-Datei ausgewählt."
	msg[ERR_TMP]="Kann keine temporäre Datei erzeugen."
	msg[TITRE_FICHIER]="=========================\n%s. Datei \"%s\"\n========================="
	msg[ERR_FICHIER]="Diese Datei existiert nicht oder ist nicht verfügbar."
	msg[FICHIER_EXISTE_QUESTION]="Die Datei existiert bereits:\n%s\n\nÜberschreiben?"
	msg[FICHIER_EXISTE]="Die Datei \"%s\" existiert bereits."
	msg[EN_COURS]="Verkleinern der Datei ..."
	msg[ERR_REDUCTION]="Beim Bearbeiten der Datei ist ein Fehler aufgetreten."
	msg[FICHIER_OPTIMISE]="Die optimierte Datei ist \"%s\"."
	msg[STATS]="Statistik:\n- Eingangsgröße: %s\n- Ausgangsgröße: %s\n- Optimierungsrate: %s %%"
	msg[UNIT_0]="B"
	msg[UNIT_1]="KiB"
	msg[UNIT_2]="MiB"
	msg[UNIT_3]="GiB"
	msg[PROP_SIZE_B]="(%s B)"
	msg[TITRE_RESULTATS]="Ergebnis"
fi

########################################################################
##
## Fonctions.
##
########################################################################

# Note: le code de cette fonction provient de mon script Corbeille-SpaceFM.
# Human readable size. I could use "du -bhs", but it rounds up, and passed 10,
# no decimal is used (for example, 14.1 is rounded up 15). Therefore, I do it
# by hand to have a better result. Note that Bash doesn't handle floating point
# arithmetic, so I use integer division and modulo (I could use the command "bc",
# but it would add another dependency).
humanReadableSize()
{
	fileSize=$1
	quotient=$fileSize
	
	# 0 => B
	# 1 => KiB
	# 2 => MiB
	# and so on
	unitIndex=-1
	
	while ((quotient > 0)); do
		((quotient = quotient / 1024))
		((++unitIndex))
	done
	
	if ((unitIndex > 0)); then
		((divisorInBytes = 1024**unitIndex))
		((quotient1      = fileSize          / $divisorInBytes))
		((remainder1     = fileSize          % $divisorInBytes))
		((quotient2      = (remainder1 * 10) / $divisorInBytes))
		((remainder2     = (remainder1 * 10) % $divisorInBytes))
		((quotient3      = (remainder2 * 10) / $divisorInBytes))
		((remainder3     = (remainder2 * 10) % $divisorInBytes))
		
		# Rounding the first decimal.
		if ((quotient3 >= 5)); then
			if [[ $quotient2 == 9 ]]; then
				((++quotient1))
				quotient2=0
			else
				((++quotient2))
			fi
		fi
		
		decimalSeparator=.
		
		# Make the decimal separator to follow locale.
		if type locale > /dev/null 2>&1; then
			lcNumeric=$(locale -k LC_NUMERIC)
			
			if [[ $lcNumeric =~ decimal_point=\"(.)\" ]]; then
				decimalSeparator=${BASH_REMATCH[1]}
			fi
		fi
		
		humanReadableSize=$quotient1$decimalSeparator$quotient2
	else
		unitIndex=0 # In case we have a negative index.
		humanReadableSize=$fileSize
	fi
	
	printf "$humanReadableSize ${msg[UNIT_$unitIndex]}"
	
	if ((unitIndex > 0)); then
		printf " ${msg[PROP_SIZE_B]}" "$fileSize"
	fi
}

########################################################################
##
## Dépendances.
##
########################################################################

cheminConfig=$HOME/.config/pdfmm.conf
ancienCheminConfig=$HOME/.pdfmm.conf

if [[ -e $ancienCheminConfig && ! -e $cheminConfig ]]; then
	mv "$ancienCheminConfig" "$cheminConfig"
elif [[ -e $ancienCheminConfig && -e $cheminConfig ]]; then
	rm -f "$ancienCheminConfig"
elif [[ ! -e $cheminConfig ]]; then
	echo "dossier=" > "$cheminConfig"
fi

if ! type -p zenity > /dev/null; then
	if type -p xmessage > /dev/null; then
		xmessage -print "${msg[ERR_ZENITY]}"
	else
		echo "${msg[ERR_ZENITY]}" >&2
	fi
	
	exit 1
fi

if ! type -p gs > /dev/null; then
	zenity --error --text="${msg[ERR_GS]}"
	
	exit 1
fi

if ! type -p sed > /dev/null; then
	zenity --error --text="${msg[ERR_SED]}"
	
	exit 1
fi

########################################################################
##
## Code principal.
##
########################################################################

fichierTmp=$(mktemp) && fichierTmp2=$(mktemp)

if [[ $? != 0 ]]; then
	zenity --error --text="${msg[ERR_TMP]}"
	
	exit 1
fi

trap "rm -f $fichierTmp $fichierTmp2" 0 1 2 3 15

if [[ -n $@ ]]; then
	listePdfAreduire=("$@")
else
	dossier=$(sed -n "s/^dossier=\(.*\)$/\1/p" < "$cheminConfig")
	
	if [[ -z $dossier ]]; then
		dossier=$HOME
	fi
	
	selectionZenity=$(zenity --file-selection --multiple --separator="//" \
		--filename="$dossier/" --title="${msg[TITRE_SELECTION]}")
	
	if [[ $? != 0 ]]; then
		zenity --error --text="${msg[ERR_SELECTION]}"
		
		exit 1
	fi
	
	listePdfAreduire=()
	
	while [[ -n $selectionZenity ]]; do
		listePdfAreduire+=("${selectionZenity%%//*}")
		ancienneSelectionZenity=$selectionZenity
		selectionZenity=${selectionZenity#*//}
		
		if [[ $selectionZenity == $ancienneSelectionZenity ]]; then
			selectionZenity=
		fi
	done
fi

configMiseAJour=false
compteur=1
((increment = 100 / ${#listePdfAreduire[@]}))
pourcentage=0

for pdfAreduire in "${listePdfAreduire[@]}"; do
	echo "$pourcentage"
	printf "${msg[TITRE_FICHIER]}" "$compteur" "$pdfAreduire" >> "$fichierTmp"
	echo -e "\n" >> "$fichierTmp"
	
	((compteur++))
	((pourcentage += increment))
	
	if [[ ! -f $pdfAreduire ]]; then
		echo "${msg[ERR_FICHIER]}" >> "$fichierTmp"
		echo >> "$fichierTmp"
		continue
	fi
	
	# Mise à jour de la configuration.
	if [[ $configMiseAJour == false ]]; then
		dossier=$(dirname "$pdfAreduire")
		
		# On s'assure d'avoir un chemin absolu.
		if [[ $dossier != /* ]]; then
			dossier=$(pwd)/$dossier
		fi
		
		sed -i "s|^\(dossier=\).*$|\1$dossier|" "$cheminConfig"
		configMiseAJour=true
	fi
	
	# Si elle existe, l'extension est récupérée pour conserver sa casse («pdf» ou «PDF»).
	nomFichier=$(basename "$pdfAreduire")
	ext=${nomFichier##*.}
	
	if [[ $ext != $nomFichier ]]; then
		pdfReduit=$(echo "$pdfAreduire" | sed "s/\.$ext$/--.$ext/")
	else
		pdfReduit=$pdfAreduire--
	fi
	
	if [[ -f $pdfReduit ]]; then
		zenity --question --text="$(printf "${msg[FICHIER_EXISTE_QUESTION]}" "$pdfReduit")"
		
		if [[ $? == 1 ]]; then
			printf "${msg[FICHIER_EXISTE]}" "$pdfReduit" >> "$fichierTmp"
			echo -e "\n" >> "$fichierTmp"
			continue
		fi
	fi
	
	pdfReduitEchappe=$(echo "$pdfReduit" | sed 's/%/%%/g')
	
	versionGS=$(gs --version)
	versionComparaison="9.23"
	dPassImg="-dPassThroughJPEGImages=false"
	if [[ "$(printf '%s\n' $versionGS $versionComparaison | sort -V | head -n 1)" != $versionComparaison ]]; then
		# Version < 9.23
		dPassImg=""
	fi
	
	gs -dBATCH -dNOPAUSE -q $dPassImg -sDEVICE=pdfwrite -dPDFSETTINGS=/default \
		-sOutputFile="$pdfReduitEchappe" "$pdfAreduire"
	
	if [[ $? != 0 ]]; then
		if [[ -f $pdfReduit ]]; then
			rm -f "$pdfReduit"
		fi
		
		echo "${msg[ERR_REDUCTION]}" >> "$fichierTmp"
		echo >> "$fichierTmp"
		continue
	fi
	
	echo -n "$pdfReduit" >> "$fichierTmp2"
	echo -en "\0" >> "$fichierTmp2"
	
	tailleDepart=$(stat --format=%s "$pdfAreduire")
	tailleDepartFormatee=$(humanReadableSize "$tailleDepart")
	tailleSortie=$(stat --format=%s "$pdfReduit")
	tailleSortieFormatee=$(humanReadableSize "$tailleSortie")
	
	if ((tailleDepart > 0)); then
		pourcentageOptimisation=$(( ((tailleDepart - tailleSortie) * 100) / tailleDepart ))
	fi
	
	if [[ -z $pourcentageOptimisation ]]; then
		pourcentageOptimisation=0
	fi
	
	printf "${msg[FICHIER_OPTIMISE]}" "$pdfReduit" >> "$fichierTmp"
	echo -e "\n" >> "$fichierTmp"
	printf "${msg[STATS]}" "$tailleDepartFormatee" "$tailleSortieFormatee" \
		"$pourcentageOptimisation" >> "$fichierTmp"
	echo -e "\n" >> "$fichierTmp"
done | zenity --progress --no-cancel --auto-close --text="${msg[EN_COURS]}"

zenity --text-info --width=700 --height=500 --filename="$fichierTmp" \
	--title="${msg[TITRE_RESULTATS]}"

if [[ $? != 0 ]]; then
	toutLu=false
	
	until "$toutLu"; do
		read -d $'\0' -r fichier || toutLu=true
		rm -f "$fichier"
	done < "$fichierTmp2"
fi

exit 0
